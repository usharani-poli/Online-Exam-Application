@model Online_Exam_Application.Models.Questions
@*@{
        ViewBag.Title = "NextQuestion";
        ViewBag.Title = @ViewBag.score;
    }*@

<h2>Next Question</h2>


@{
    ViewBag.Title = "Question";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<br>

<h2>Please select an answer and click on Next to proceed further.</h2>
<h3>If you don't answer the question before the timer runs out the 
    question gets expired and you will be redirected to the next question.</h3>

<div id="clockdiv">
    <h1 style="color: red">
        <div id="countdown"></div>
        <div class="minutes" style="float: left"> </div>
        <p style="float: left">:</p>
        <div class="seconds"></div>
    </h1>
</div>

<script>
    function getTimeRemaining(endtime) {
        var t = Date.parse(endtime) - Date.parse(new Date());
        var seconds = Math.floor((t / 1000) % 60);
        var minutes = Math.floor((t / 1000 / 60) % 1);
        return {
            'total': t,
            'minutes': minutes,
            'seconds': seconds
        };
    }
    function initializeClock(id, endtime) {
        var clock = document.getElementById(id);
        var minutesSpan = clock.querySelector('.minutes');
        var secondsSpan = clock.querySelector('.seconds');
        function updateClock() {
            var t = getTimeRemaining(endtime);
            minutesSpan.innerHTML = ('0' + t.minutes).slice(-2);
            secondsSpan.innerHTML = ('0' + t.seconds).slice(-2);
            if (t.total <= 0) {
                clearInterval(timeinterval);
            }
        }
        updateClock();
        var timeinterval = setInterval(updateClock, 1000);
    }
    var deadline = new Date(Date.parse(new Date()) + 60 * 60 * 1000);
    initializeClock('clockdiv', deadline);
    // ...................................
    @*var _second = 1000;
    var _minute = _second * 60;
    var _hour = _minute * 60;
    var _day = _hour * 24;
    var timer;*@
    var end = new Date().getTime() + (60 * _second);
    //
    function showRemaining() {
        var now = new Date();
        var distance = end - now;
        if (distance < 0) {
            clearInterval(timer);
            //document.getElementById('countdown').innerHTML = 'EXPIRED!';
            document.getElementById('nextBtn').click();
            return;
        }
        @*var days = Math.floor(distance / _day);
        var hours = Math.floor((distance % _day) / _hour);
        var minutes = Math.floor((distance % _hour) / _minute);
        var seconds = Math.floor((distance % _minute) / _second);
        document.getElementById('countdown').innerHTML = days + 'days ';
        document.getElementById('countdown').innerHTML += hours + 'hrs ';
        document.getElementById('countdown').innerHTML += minutes + 'mins ';
        document.getElementById('countdown').innerHTML += seconds + 'secs';*@
    }
    timer = setInterval(showRemaining, 1000);
</script>

<div>
    @using (Html.BeginForm("NextQuestion", "Questions", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        <div>
            @Html.ValidationMessageFor(m => m.SelectedAns, "", new { @class = "text-danger" })
            <h4> </h4>
            <hr />
            <dl class="dl-horizontal">
                <dt>
                    @ViewBag.questionNo)
                </dt>
                <dd>
                    @Html.DisplayFor(model => model.Question_Name)
                </dd>

                <dt>
                    @Html.RadioButtonFor(model => model.SelectedAns, "1")
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Ans1)
                </dd>

                <dt>
                    @Html.RadioButtonFor(model => model.SelectedAns, "2")
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Ans2)
                </dd>

                <dt>
                    @Html.RadioButtonFor(model => model.SelectedAns, "3")
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Ans3)
                </dd>

                <dt>
                    @Html.RadioButtonFor(model => model.SelectedAns, "4")
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Ans4)
                </dd>

                @Html.HiddenFor(m => m.Ans1)
                @Html.HiddenFor(m => m.Ans2)
                @Html.HiddenFor(m => m.Ans3)
                @Html.HiddenFor(m => m.Ans4)
                @Html.HiddenFor(m => m.id)
                @Html.HiddenFor(m => m.course_id)
                @Html.HiddenFor(m => m.Correct_Ans)


            </dl>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" id="nextBtn" value="NEXT" class="btn btn-danger" />
            </div>
        </div>


    }
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

